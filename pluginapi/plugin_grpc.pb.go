// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: pluginapi/plugin.proto

package pluginapi

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OnstaticPluginClient is the client API for OnstaticPlugin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OnstaticPluginClient interface {
	Name(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*NameResponse, error)
	Start(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*EmptyMessage, error)
	Stop(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*EmptyMessage, error)
	Handle(ctx context.Context, in *HandleRequest, opts ...grpc.CallOption) (*HandleResponse, error)
}

type onstaticPluginClient struct {
	cc grpc.ClientConnInterface
}

func NewOnstaticPluginClient(cc grpc.ClientConnInterface) OnstaticPluginClient {
	return &onstaticPluginClient{cc}
}

func (c *onstaticPluginClient) Name(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*NameResponse, error) {
	out := new(NameResponse)
	err := c.cc.Invoke(ctx, "/plugin.OnstaticPlugin/Name", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *onstaticPluginClient) Start(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*EmptyMessage, error) {
	out := new(EmptyMessage)
	err := c.cc.Invoke(ctx, "/plugin.OnstaticPlugin/Start", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *onstaticPluginClient) Stop(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*EmptyMessage, error) {
	out := new(EmptyMessage)
	err := c.cc.Invoke(ctx, "/plugin.OnstaticPlugin/Stop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *onstaticPluginClient) Handle(ctx context.Context, in *HandleRequest, opts ...grpc.CallOption) (*HandleResponse, error) {
	out := new(HandleResponse)
	err := c.cc.Invoke(ctx, "/plugin.OnstaticPlugin/Handle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OnstaticPluginServer is the server API for OnstaticPlugin service.
// All implementations must embed UnimplementedOnstaticPluginServer
// for forward compatibility
type OnstaticPluginServer interface {
	Name(context.Context, *EmptyMessage) (*NameResponse, error)
	Start(context.Context, *EmptyMessage) (*EmptyMessage, error)
	Stop(context.Context, *EmptyMessage) (*EmptyMessage, error)
	Handle(context.Context, *HandleRequest) (*HandleResponse, error)
	mustEmbedUnimplementedOnstaticPluginServer()
}

// UnimplementedOnstaticPluginServer must be embedded to have forward compatible implementations.
type UnimplementedOnstaticPluginServer struct {
}

func (UnimplementedOnstaticPluginServer) Name(context.Context, *EmptyMessage) (*NameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Name not implemented")
}
func (UnimplementedOnstaticPluginServer) Start(context.Context, *EmptyMessage) (*EmptyMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Start not implemented")
}
func (UnimplementedOnstaticPluginServer) Stop(context.Context, *EmptyMessage) (*EmptyMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stop not implemented")
}
func (UnimplementedOnstaticPluginServer) Handle(context.Context, *HandleRequest) (*HandleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Handle not implemented")
}
func (UnimplementedOnstaticPluginServer) mustEmbedUnimplementedOnstaticPluginServer() {}

// UnsafeOnstaticPluginServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OnstaticPluginServer will
// result in compilation errors.
type UnsafeOnstaticPluginServer interface {
	mustEmbedUnimplementedOnstaticPluginServer()
}

func RegisterOnstaticPluginServer(s grpc.ServiceRegistrar, srv OnstaticPluginServer) {
	s.RegisterService(&OnstaticPlugin_ServiceDesc, srv)
}

func _OnstaticPlugin_Name_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnstaticPluginServer).Name(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/plugin.OnstaticPlugin/Name",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnstaticPluginServer).Name(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _OnstaticPlugin_Start_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnstaticPluginServer).Start(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/plugin.OnstaticPlugin/Start",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnstaticPluginServer).Start(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _OnstaticPlugin_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnstaticPluginServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/plugin.OnstaticPlugin/Stop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnstaticPluginServer).Stop(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _OnstaticPlugin_Handle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnstaticPluginServer).Handle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/plugin.OnstaticPlugin/Handle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnstaticPluginServer).Handle(ctx, req.(*HandleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OnstaticPlugin_ServiceDesc is the grpc.ServiceDesc for OnstaticPlugin service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OnstaticPlugin_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "plugin.OnstaticPlugin",
	HandlerType: (*OnstaticPluginServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Name",
			Handler:    _OnstaticPlugin_Name_Handler,
		},
		{
			MethodName: "Start",
			Handler:    _OnstaticPlugin_Start_Handler,
		},
		{
			MethodName: "Stop",
			Handler:    _OnstaticPlugin_Stop_Handler,
		},
		{
			MethodName: "Handle",
			Handler:    _OnstaticPlugin_Handle_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pluginapi/plugin.proto",
}
